document.addEventListener('DOMContentLoaded',function () {

  let addToCartFormSelector = "#add-to-cart-form",
     productOptionsSelector = addToCartFormSelector + " [name*=option]";
  
  let productForm = {

    onProductOptionChanged: function (event) {

      console.log('change 1.0');
   
      let $form = document.querySelector(addToCartFormSelector);
      let selectedVariant = productForm.getActiveVariant($form);
      
      var formChangeEvent = new CustomEvent('form:change', { detail: selectedVariant });
        $form.dispatchEvent(formChangeEvent);


    },

    getActiveVariant: function ($form, newForm) {
      let formEl = document.querySelector("#add-to-cart-form"),
      variants = JSON.parse(decodeURIComponent(formEl.dataset.variants));
    
      // formInlineData = $form.serializeArray(); // removed j query
     
      formInlineData = new URLSearchParams(
        Array.from(new FormData(formEl))
      ).toString(),

      formOptions = {
        option1: null,
        option2: null,
        option3: null,
      },

      selectedVariant = null,
      selectedVariantMax = null;

      // Initialize an empty array to store objects
      let objectsArray = [];
      let keyValuePairs = formInlineData.split("&");
      // Iterate over the key-value pairs and create objects
      keyValuePairs.forEach((pair) => {
        const [key, value] = pair.split("=");
        const obj = {
          name: key, // Add name property
          value: value, // Add value property
        };
        objectsArray.push(obj);
      });

      console.log(formOptions);
      console.log(objectsArray);

      objectsArray.forEach(function (item, index) {
        if (item.name.indexOf("option") !== -1) {
          formOptions[item.name] = item.value;
        }
      });

      variants.forEach(function (variant) {
        if (
          variant.option1 === formOptions.option1 &&
          variant.option2 === formOptions.option2 &&
          variant.option3 === formOptions.option3
        ) {
          selectedVariant = variant;
          selectedVariantMax = variant.inventory_quantity;
          return false; // Exiting the loop early since the variant is found
        }
      });

      return selectedVariant;
    },

    validate: function (event) {

      console.log('validate 2.13')
     

      let $form = this;
       
        selectedVariant = productForm.getActiveVariant($form),
        hasVariant = selectedVariant !== null,
        canAddToCart = hasVariant && selectedVariant.inventory_quantity > 0,
        $id = document.querySelector(".js-variant-id"),
        $quantity = document.querySelector(".js-quantity-total"),
        $addToCartButton = document.querySelector("#add-to-cart-button"),
        $maxQuantity = selectedVariant.inventory_quantity;

    
      if (canAddToCart) {
        $id.value = selectedVariant.id;
        $addToCartButton.disabled = false;
        $quantity.dataset.max = $maxQuantity;
      } else {
        $id.value = 'null'; 
        $addToCartButton.disabled = true; 
      }
    },

    init: function () {
 
      // $(document).on( "change", productOptionsSelector, productForm.onProductOptionChanged ); 
      // $(document).on('form:change', addToCartFormSelector, productForm.validate)    

      console.log('init 1.2')
      document.addEventListener('change', productForm.onProductOptionChanged )
      document.addEventListener('change', function(event) {
       productForm.validate( event);
    });

    }

}

  productForm.init();

  // Quanity

  

  let plus = document.querySelector(".js-quantity-add");
  let minus = document.querySelector(".js-quantity-minus");
  let quantity = document.querySelector(".js-quantity-total");
  let quantityHidden = document.querySelector(".js-hidden-quantity");
  let currentCount = 1;

  let add = () => {

    let max = quantity.dataset.max;
    if (currentCount < max) {
      currentCount += 1;
      quantity.dataset.current = currentCount;
      quantity.innerHTML = currentCount;
      quantity.innerHTML = currentCount;
      quantityHidden.value = currentCount;
      console.log(quantityHidden);
    }
  };

  let reduce = () => {
    let max = quantity.dataset.max;

    if (currentCount > 1) {
      currentCount = currentCount - 1;
      quantity.dataset.current = currentCount;
      quantity.innerHTML = currentCount;
      quantity.innerHTML = currentCount;
      quantityHidden.value = currentCount;
    }
  };

  if (plus) {
    plus.addEventListener("click", add);
  }

  if (minus) {
    minus.addEventListener("click", reduce);
  }


});

document.addEventListener('liquid-ajax-cart:request-end', event => {
  const {requestState} = event.detail;

  // If the "add to cart" request is successful
  if (requestState.requestType === 'add' && requestState.responseData?.ok) {

    // Add the CSS class to the "body" tag
    document.body.classList.add('js-show-ajax-cart');
  }
});


document.addEventListener('DOMContentLoaded',function () {

  let cart = document.querySelector('.my-cart');
  let bodyWrap = document.querySelectorAll('.body-wrap')
  let cartBtns = document.querySelectorAll('.cart-btn');
  let cartState = false ;

  let winHeight = window.innerHeight;
  document.documentElement.style.setProperty('--winHeight', winHeight + 'px');

document.addEventListener('resize', ()=> {
  winHeight = window.innerHeight;
  document.documentElement.style.setProperty('--winHeight', winHeight + 'px');
})



   console.log(cartBtns)

     let closeCart= ()=> {
      
      cart.classList.remove('cart-open')
      document.body.classList.remove('dim')
      
    };

    let openCart= ()=> {
  
      cart.classList.add('cart-open')
      document.body.classList.add('dim')

    };



    cartBtns.forEach( (i) => {
      i.addEventListener('mousedown', ()=> {  

        
        
        if(cartState){
   

          cartState = false;
          closeCart();
          console.log(cart)
        
          
        } else { 
        
          cartState = true;
          openCart();
          console.log(cart)

        }
  
      });
  
    })

    
    })

// btn
